{"version":3,"sources":["Textarea.tsx","Table.tsx","App.tsx","serviceWorker.js","index.tsx","App.module.css"],"names":["Textarea","props","onChange","rows","style","width","Table","motorCycle","lightVehicle","heavyVehicle","total","App","useState","setMotorCycle","setLightVehicle","setHeavyVehicle","setTotal","rawData","setRawData","className","container","event","data","target","value","countBy","filter","l","parseInt","length","replace","JSON","stringify","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"iMAMO,SAASA,EAASC,GACvB,OAAO,0BAAUC,SAAUD,EAAMC,SAAUC,KAAM,EAAGC,MAAO,CAAEC,MAAO,UCE/D,SAASC,EAAT,GAA+E,IAA9DC,EAA6D,EAA7DA,WAAYC,EAAiD,EAAjDA,aAAcC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,MAC9D,OACE,gCACE,kCACE,+BACE,8CACA,6BAAKH,OAEP,+BACE,kDACA,6BAAKC,OAEP,+BACE,iDACA,6BAAKC,OAEP,+BACE,uCACA,6BAAKC,Y,oBCSAC,MA7Bf,WAAgB,IAAD,EACuBC,mBAAS,GADhC,mBACNL,EADM,KACMM,EADN,OAE2BD,mBAAS,GAFpC,mBAENJ,EAFM,KAEQM,EAFR,OAG2BF,mBAAS,GAHpC,mBAGNH,EAHM,KAGQM,EAHR,OAIaH,mBAAS,GAJtB,mBAINF,EAJM,KAICM,EAJD,OAKiBJ,mBAAS,IAL1B,mBAKNK,EALM,KAKGC,EALH,KAkBb,OACE,qBAAKC,UAAWf,IAAMO,IAAtB,SACE,sBAAKQ,UAAWf,IAAMgB,UAAtB,UACE,cAACpB,EAAD,CAAUE,SAdU,SAACmB,GACzB,IAAMC,EAAOD,EAAME,OAAOC,MAE1BN,EAAWO,kBAAQH,IAEnBT,EAAc,YAAIS,GAAMI,QAAO,SAACC,GAAD,OAAuB,IAAhBC,SAASD,MAAUE,QACzDf,EAAgB,YAAIQ,GAAMI,QAAO,SAACC,GAAD,OAAuB,IAAhBC,SAASD,MAAUE,QAC3Dd,EAAgB,YAAIO,GAAMI,QAAO,SAACC,GAAD,OAAuB,IAAhBC,SAASD,MAAUE,QAC3Db,EAASM,EAAKQ,QAAQ,OAAQ,IAAID,WAO9B,cAACvB,EAAD,CAAOC,WAAYA,EAAYC,aAAcA,EAAcC,aAAcA,EAAcC,MAAOA,IAC9F,8BAAMqB,KAAKC,UAAUf,EAAS,KAAM,WClBxBgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBElInBC,EAAOC,QAAU,CAAC,IAAM,iBAAiB,UAAY,0B","file":"static/js/main.a9fe655c.chunk.js","sourcesContent":["import React from 'react'\n\ntype TextareaProps = {\n  onChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void\n}\n\nexport function Textarea(props: TextareaProps) {\n  return <textarea onChange={props.onChange} rows={5} style={{ width: '100%' }}></textarea>\n}\n","import React from 'react'\n\ntype TableProps = {\n  motorCycle: number\n  lightVehicle: number\n  heavyVehicle: number\n  total: number\n}\n\nexport function Table({ motorCycle, lightVehicle, heavyVehicle, total }: TableProps) {\n  return (\n    <table>\n      <tbody>\n        <tr>\n          <td>Sepeda Motor</td>\n          <td>{motorCycle}</td>\n        </tr>\n        <tr>\n          <td>Kendaraan Ringan</td>\n          <td>{lightVehicle}</td>\n        </tr>\n        <tr>\n          <td>Kendaraan Berat</td>\n          <td>{heavyVehicle}</td>\n        </tr>\n        <tr>\n          <td>Total</td>\n          <td>{total}</td>\n        </tr>\n      </tbody>\n    </table>\n  )\n}\n","import React, { useState } from 'react'\nimport { countBy } from 'lodash'\n\nimport { Textarea } from './Textarea'\nimport { Table } from './Table'\nimport style from './App.module.css'\n\nfunction App() {\n  const [motorCycle, setMotorCycle] = useState(0)\n  const [lightVehicle, setLightVehicle] = useState(0)\n  const [heavyVehicle, setHeavyVehicle] = useState(0)\n  const [total, setTotal] = useState(0)\n  const [rawData, setRawData] = useState({})\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const data = event.target.value\n\n    setRawData(countBy(data))\n\n    setMotorCycle([...data].filter((l) => parseInt(l) === 1).length)\n    setLightVehicle([...data].filter((l) => parseInt(l) === 2).length)\n    setHeavyVehicle([...data].filter((l) => parseInt(l) === 3).length)\n    setTotal(data.replace(/\\D+/g, '').length)\n  }\n\n  return (\n    <div className={style.App}>\n      <div className={style.container}>\n        <Textarea onChange={handleInputChange} />\n        <Table motorCycle={motorCycle} lightVehicle={lightVehicle} heavyVehicle={heavyVehicle} total={total} />\n        <pre>{JSON.stringify(rawData, null, 2)}</pre>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\",\"container\":\"App_container__1MQN3\"};"],"sourceRoot":""}